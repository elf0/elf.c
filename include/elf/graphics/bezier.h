#ifndef BEZIER_H
#define BEZIER_H

//License: Public Domain
//Author: elf
//EMail: elf@iamelf.com

// 65 points
// The values of control points should in range [-524288, 524287]
// example:
// void DrawBeizer2(I32 p0x, I32 p0y, I32 p1x, I32 p1y, I32 p2x, I32 p2y) {
//   MoveTo(p0x, p0x);
//   I32 *pC = bezier2_coefficients_65;
//   I32 *pCR = &bezier2_coefficients_65[124];
//   I32 *pCEnd = pC + 126;
//   while (pC != pCEnd) {
//     I32 c0 = *pC++;
//     I32 c1 = *pC++;
//     I32 c2 = *pCR;
//     pCR-= 2;
//     I32 x = (c0 * p0x + c1 * p1x + c2 * p2x) >> 12;
//     I32 y = (c0 * p0y + c1 * p1y + c2 * p2y) >> 12;
//     LineTo(x, y);
//   }
//   LineTo(p3x, p3y);
// }

static I32 bezier2_coefficients_65[126] = {
  3969, 126, 3844, 248, 3721, 366,
  3600, 480, 3481, 590, 3364, 696,
  3249, 798, 3136, 896, 3025, 990,
  2916, 1080, 2809, 1166, 2704, 1248,
  2601, 1326, 2500, 1400, 2401, 1470,
  2304, 1536, 2209, 1598, 2116, 1656,
  2025, 1710, 1936, 1760, 1849, 1806,
  1764, 1848, 1681, 1886, 1600, 1920,
  1521, 1950, 1444, 1976, 1369, 1998,
  1296, 2016, 1225, 2030, 1156, 2040,
  1089, 2046, 1024, 2048, 961, 2046,
  900, 2040, 841, 2030, 784, 2016,
  729, 1998, 676, 1976, 625, 1950,
  576, 1920, 529, 1886, 484, 1848,
  441, 1806, 400, 1760, 361, 1710,
  324, 1656, 289, 1598, 256, 1536,
  225, 1470, 196, 1400, 169, 1326,
  144, 1248, 121, 1166, 100, 1080,
  81, 990, 64, 896, 49, 798,
  36, 696, 25, 590, 16, 480,
  9, 366, 4, 248, 1, 126
};

inline static
I32 bezier2_65(I32 c0, I32 p0, I32 c1, I32 p1, I32 c2, I32 p2) {
  return (c0 * p0 + c1 * p1 + c2 * p2) >> 12;
}

// 65 points
// The values of control points should in range [-8192, 8191]
// example:
// void DrawBeizer3(I32 p0x, I32 p0y, I32 p1x, I32 p1y, I32 p2x, I32 p2y, I32 p3x, I32 p3y) {
//   MoveTo(p0x, p0y);
//   I32 *pC = bezier3_coefficients_65;
//   I32 *pCR = &bezier3_coefficients_65[125];
//   I32 *pCEnd = pC + 126;
//   while (pC != pCEnd) {
//     I32 c0 = *pC++;
//     I32 c1 = *pC++;
//     I32 c2 = *pCR--;
//     I32 c3 = *pCR--;
//     I32 x = (c0 * p0x + c1 * p1x + c2 * p2x + c3 * p3x) >> 18;
//     I32 y = (c0 * p0y + c1 * p1y + c2 * p2y + c3 * p3y) >> 18;
//     LineTo(x, y);
//   }
//   LineTo(p3x, p3y);
// }

static I32 bezier3_coefficients_65[126] = {
  250047, 11907, 238328, 23064, 226981, 33489,
  216000, 43200, 205379, 52215, 195112, 60552,
  185193, 68229, 175616, 75264, 166375, 81675,
  157464, 87480, 148877, 92697, 140608, 97344,
  132651, 101439, 125000, 105000, 117649, 108045,
  110592, 110592, 103823, 112659, 97336, 114264,
  91125, 115425, 85184, 116160, 79507, 116487,
  74088, 116424, 68921, 115989, 64000, 115200,
  59319, 114075, 54872, 112632, 50653, 110889,
  46656, 108864, 42875, 106575, 39304, 104040,
  35937, 101277, 32768, 98304, 29791, 95139,
  27000, 91800, 24389, 88305, 21952, 84672,
  19683, 80919, 17576, 77064, 15625, 73125,
  13824, 69120, 12167, 65067, 10648, 60984,
  9261, 56889, 8000, 52800, 6859, 48735,
  5832, 44712, 4913, 40749, 4096, 36864,
  3375, 33075, 2744, 29400, 2197, 25857,
  1728, 22464, 1331, 19239, 1000, 16200,
  729, 13365, 512, 10752, 343, 8379,
  216, 6264, 125, 4425, 64, 2880,
  27, 1647, 8, 744, 1, 189
};

inline static
I32 bezier3_65(I32 c0, I32 p0, I32 c1, I32 p1, I32 c2, I32 p2, I32 c3, I32 p3) {
  return (c0 * p0 + c1 * p1 + c2 * p2 + c3 * p3) >> 18;
}

#endif
